{"ast":null,"code":"var _jsxFileName = \"/home/oniact/Documents/shopping_list/src/context/ListsContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useCallback, useReducer } from \"react\";\nimport useDataFetching from \"../hooks/useDataFetching\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListsContext = /*#__PURE__*/createContext();\nconst initialState = {\n  lists: [],\n  list: [],\n  loading: true,\n  error: ''\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_LISTS_SUCCESS':\n      return { ...state,\n        lists: action.payload,\n        loading: false\n      };\n\n    case 'GET_LISTS_ERROR':\n      return { ...state,\n        lists: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const ListsContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // const [loading, error, data] = useDataFetching('https://my-json-server.typicode.com/PackPublishing/React-Projects-Second-Edition/lists');\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const fetchLists = useCallback(async () => {\n    try {\n      const data = await fetch(`https://my-json-server.typicode.com/PackPublishing/React-Projects-Second-Edition/lists`);\n      const result = await data.json();\n\n      if (result) {\n        dispatch({\n          type: 'GET_LISTS_SUCCESS',\n          payload: result\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: 'GET_LISTS_ERROR',\n        payload: e.message\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ListsContext.Provider, {\n    value: { ...state,\n      fetchLists\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ListsContextProvider, \"JkKcLS0LKqXxkn8CHSdKbm9qK/E=\");\n\n_c = ListsContextProvider;\nexport default ListsContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListsContextProvider\");","map":{"version":3,"sources":["/home/oniact/Documents/shopping_list/src/context/ListsContext.js"],"names":["createContext","useCallback","useReducer","useDataFetching","ListsContext","initialState","lists","list","loading","error","reducer","state","action","type","payload","ListsContextProvider","children","dispatch","fetchLists","data","fetch","result","json","e","message"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,UAArC,QAAuD,OAAvD;AAEA,OAAOC,eAAP,MAA4B,0BAA5B;;AAEA,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,EAAlC;AAGP,MAAMK,YAAY,GAAG;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,IAAI,EAAE,EAHW;AAIjBC,EAAAA,OAAO,EAAE,IAJQ;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAArB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAE/B,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAK,mBAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHL,QAAAA,KAAK,EAAEM,MAAM,CAACE,OAFX;AAGHN,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAOJ,SAAK,iBAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHL,QAAAA,KAAK,EAAE,EAFJ;AAGHE,QAAAA,OAAO,EAAE,KAHN;AAIHC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAJX,OAAP;;AASJ;AACI,aAAOH,KAAP;AArBR;;AAsBC;AACJ,CAzBD;;AA2BA,OAAO,MAAMI,oBAAoB,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAEhD;AAEA,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBf,UAAU,CAACQ,OAAD,EAAUL,YAAV,CAApC;AAEA,QAAMa,UAAU,GAAGjB,WAAW,CAAC,YAAY;AAEvC,QAAI;AAEA,YAAMkB,IAAI,GAAG,MAAMC,KAAK,CAAE,wFAAF,CAAxB;AAEA,YAAMC,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAL,EAArB;;AAEA,UAAID,MAAJ,EAAY;AAERJ,QAAAA,QAAQ,CAAC;AAAEJ,UAAAA,IAAI,EAAE,mBAAR;AAA6BC,UAAAA,OAAO,EAAEO;AAAtC,SAAD,CAAR;AACH;AACJ,KAVD,CAUE,OAAOE,CAAP,EAAU;AAEJN,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE,iBAAR;AAA2BC,QAAAA,OAAO,EAAES,CAAC,CAACC;AAAtC,OAAD,CAAR;AACP;AACJ,GAhB6B,EAgB3B,EAhB2B,CAA9B;AAkBA,sBAEI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,EAAE,GAAGb,KAAL;AAAYO,MAAAA;AAAZ,KAA9B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UAFJ;AAOH,CA/BM;;GAAMD,oB;;KAAAA,oB;AAiCb,eAAeX,YAAf","sourcesContent":["import { createContext, useCallback, useReducer } from \"react\";\n\nimport useDataFetching from \"../hooks/useDataFetching\";\n\nexport const ListsContext = createContext();\n\n\nconst initialState = {\n\n    lists: [],\n    list: [],\n    loading: true,\n    error: '',\n};\n\nconst reducer = (state, action) => {\n\n    switch(action.type) {\n\n        case 'GET_LISTS_SUCCESS':\n            return {\n                ...state,\n                lists: action.payload,\n                loading: false,\n            };\n\n\n        case 'GET_LISTS_ERROR':\n            return {\n                ...state,\n                lists: [],\n                loading: false,\n                error: action.payload,\n            };\n\n            \n\n        default:\n            return state;\n    };\n}\n\nexport const ListsContextProvider = ({children}) => {\n\n    // const [loading, error, data] = useDataFetching('https://my-json-server.typicode.com/PackPublishing/React-Projects-Second-Edition/lists');\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const fetchLists = useCallback(async () => {\n\n        try {\n\n            const data = await fetch(`https://my-json-server.typicode.com/PackPublishing/React-Projects-Second-Edition/lists`);\n\n            const result = await data.json();\n\n            if (result) {\n\n                dispatch({ type: 'GET_LISTS_SUCCESS', payload: result});\n            }\n        } catch (e) {\n\n                dispatch({ type: 'GET_LISTS_ERROR', payload: e.message});\n        }\n    }, [])\n\n    return(\n\n        <ListsContext.Provider value={{ ...state, fetchLists }}>\n            {children}\n        </ListsContext.Provider>\n\n    );\n};\n\nexport default ListsContext; "]},"metadata":{},"sourceType":"module"}